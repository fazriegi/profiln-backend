// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_otp.sql

package repository

import (
	"context"
	"database/sql"
)

const getUserOtpByOtp = `-- name: GetUserOtpByOtp :one
SELECT id, user_id, otp 
FROM user_otps 
WHERE otp = $1 
LIMIT 1
`

func (q *Queries) GetUserOtpByOtp(ctx context.Context, otp sql.NullString) (UserOtp, error) {
	row := q.db.QueryRowContext(ctx, getUserOtpByOtp, otp)
	var i UserOtp
	err := row.Scan(&i.ID, &i.UserID, &i.Otp)
	return i, err
}

const insertOtp = `-- name: InsertOtp :one
INSERT INTO user_otps (
  user_id, otp
) VALUES (
  $1, $2
)
RETURNING id, user_id, otp
`

type InsertOtpParams struct {
	UserID sql.NullInt64
	Otp    sql.NullString
}

func (q *Queries) InsertOtp(ctx context.Context, arg InsertOtpParams) (UserOtp, error) {
	row := q.db.QueryRowContext(ctx, insertOtp, arg.UserID, arg.Otp)
	var i UserOtp
	err := row.Scan(&i.ID, &i.UserID, &i.Otp)
	return i, err
}
