// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package repository

import (
	"context"
	"database/sql"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, full_name, verified_email FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.FullName,
		&i.VerifiedEmail,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (
  email, password, full_name, verified_email
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, email, password, full_name, verified_email
`

type InsertUserParams struct {
	Email         string
	Password      sql.NullString
	FullName      string
	VerifiedEmail sql.NullBool
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.Email,
		arg.Password,
		arg.FullName,
		arg.VerifiedEmail,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.FullName,
		&i.VerifiedEmail,
	)
	return i, err
}

const updateVerifiedEmailByOTP = `-- name: UpdateVerifiedEmailByOTP :exec
UPDATE users
SET verified_email = TRUE
FROM user_otps 
WHERE users.id = user_otps.id AND user_otps.otp = $1
RETURNING user_otps.id, user_id, otp, users.id, email, password, full_name, verified_email
`

func (q *Queries) UpdateVerifiedEmailByOTP(ctx context.Context, otp sql.NullString) error {
	_, err := q.db.ExecContext(ctx, updateVerifiedEmailByOTP, otp)
	return err
}
