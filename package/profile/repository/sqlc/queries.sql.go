// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package profile

import (
	"context"
	"database/sql"
)

const getProfile = `-- name: GetProfile :many
SELECT users.full_name, users.bio, user_social_links.url, social_links.name, user_skills.main_skill, skills.name, (
    SELECT COUNT(*) 
    FROM users 
    INNER JOIN followings 
    ON users.id = followings.user_id
    GROUP BY users.id
  ) AS count_following
FROM users
LEFT JOIN user_social_links
ON users.id = user_social_links.user_id
LEFT JOIN social_links
ON user_social_links.social_link_id = social_links.id
LEFT JOIN user_skills
ON users.id = user_skills.user_id
LEFT JOIN skills
ON user_skills.skill_id = skills.id
WHERE user_skills.main_skill = TRUE AND users.id = $1
`

type GetProfileRow struct {
	FullName       string
	Bio            sql.NullString
	Url            sql.NullString
	Name           sql.NullString
	MainSkill      sql.NullBool
	Name_2         sql.NullString
	CountFollowing int64
}

func (q *Queries) GetProfile(ctx context.Context, id int64) ([]GetProfileRow, error) {
	rows, err := q.db.QueryContext(ctx, getProfile, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProfileRow
	for rows.Next() {
		var i GetProfileRow
		if err := rows.Scan(
			&i.FullName,
			&i.Bio,
			&i.Url,
			&i.Name,
			&i.MainSkill,
			&i.Name_2,
			&i.CountFollowing,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserAbout = `-- name: GetUserAbout :one
SELECT users.id, user_details.about
FROM users
LEFT JOIN user_details
ON users.id = user_details.user_id
WHERE users.id = $1
LIMIT 1
`

type GetUserAboutRow struct {
	ID    int64
	About sql.NullString
}

func (q *Queries) GetUserAbout(ctx context.Context, id int64) (GetUserAboutRow, error) {
	row := q.db.QueryRowContext(ctx, getUserAbout, id)
	var i GetUserAboutRow
	err := row.Scan(&i.ID, &i.About)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, password, full_name, verified_email, avatar_url, bio, open_to_work, created_at, updated_at, deleted_at
FROM users
WHERE users.id = $1
LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.FullName,
		&i.VerifiedEmail,
		&i.AvatarUrl,
		&i.Bio,
		&i.OpenToWork,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const insertCertificate = `-- name: InsertCertificate :one
INSERT INTO certificates (
  user_id, name, issuing_organization_id, issue_date, expiration_date, credential_id, url
) VALUES (
   $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, user_id, name, issuing_organization_id, issue_date, expiration_date, credential_id, url, created_at, updated_at
`

type InsertCertificateParams struct {
	UserID                sql.NullInt64
	Name                  sql.NullString
	IssuingOrganizationID sql.NullInt64
	IssueDate             sql.NullTime
	ExpirationDate        sql.NullTime
	CredentialID          sql.NullString
	Url                   sql.NullString
}

func (q *Queries) InsertCertificate(ctx context.Context, arg InsertCertificateParams) (Certificate, error) {
	row := q.db.QueryRowContext(ctx, insertCertificate,
		arg.UserID,
		arg.Name,
		arg.IssuingOrganizationID,
		arg.IssueDate,
		arg.ExpirationDate,
		arg.CredentialID,
		arg.Url,
	)
	var i Certificate
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.IssuingOrganizationID,
		&i.IssueDate,
		&i.ExpirationDate,
		&i.CredentialID,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertCompany = `-- name: InsertCompany :one
INSERT INTO companies (
  name
) VALUES (
  $1
)
RETURNING id, name
`

func (q *Queries) InsertCompany(ctx context.Context, name sql.NullString) (Company, error) {
	row := q.db.QueryRowContext(ctx, insertCompany, name)
	var i Company
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const insertEducation = `-- name: InsertEducation :one
INSERT INTO educations (
  user_id, school_id, degree, field_of_study, gpa, start_date, finish_date
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, user_id, school_id, degree, field_of_study, gpa, start_date, finish_date, description, document_url, created_at, updated_at
`

type InsertEducationParams struct {
	UserID       sql.NullInt64
	SchoolID     sql.NullInt64
	Degree       sql.NullString
	FieldOfStudy sql.NullString
	Gpa          sql.NullString
	StartDate    sql.NullTime
	FinishDate   sql.NullTime
}

func (q *Queries) InsertEducation(ctx context.Context, arg InsertEducationParams) (Education, error) {
	row := q.db.QueryRowContext(ctx, insertEducation,
		arg.UserID,
		arg.SchoolID,
		arg.Degree,
		arg.FieldOfStudy,
		arg.Gpa,
		arg.StartDate,
		arg.FinishDate,
	)
	var i Education
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SchoolID,
		&i.Degree,
		&i.FieldOfStudy,
		&i.Gpa,
		&i.StartDate,
		&i.FinishDate,
		&i.Description,
		&i.DocumentUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertEmploymentType = `-- name: InsertEmploymentType :one
INSERT INTO employment_types (
  name
) VALUES (
  $1
)
RETURNING id, name
`

func (q *Queries) InsertEmploymentType(ctx context.Context, name sql.NullString) (EmploymentType, error) {
	row := q.db.QueryRowContext(ctx, insertEmploymentType, name)
	var i EmploymentType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const insertIssuingOrganization = `-- name: InsertIssuingOrganization :one
INSERT INTO issuing_organizations (
  name
) VALUES (
  $1
)
RETURNING id, name
`

func (q *Queries) InsertIssuingOrganization(ctx context.Context, name sql.NullString) (IssuingOrganization, error) {
	row := q.db.QueryRowContext(ctx, insertIssuingOrganization, name)
	var i IssuingOrganization
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const insertLocationType = `-- name: InsertLocationType :one
INSERT INTO location_types (
  name
) VALUES (
  $1
)
RETURNING id, name
`

func (q *Queries) InsertLocationType(ctx context.Context, name sql.NullString) (LocationType, error) {
	row := q.db.QueryRowContext(ctx, insertLocationType, name)
	var i LocationType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const insertSchool = `-- name: InsertSchool :one
INSERT INTO schools (
  name
) VALUES (
  $1
)
RETURNING id, name
`

func (q *Queries) InsertSchool(ctx context.Context, name sql.NullString) (School, error) {
	row := q.db.QueryRowContext(ctx, insertSchool, name)
	var i School
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const insertSkill = `-- name: InsertSkill :one
INSERT INTO skills (
  name
) VALUES (
  $1
)
RETURNING id, name
`

func (q *Queries) InsertSkill(ctx context.Context, name sql.NullString) (Skill, error) {
	row := q.db.QueryRowContext(ctx, insertSkill, name)
	var i Skill
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const insertUserAvatar = `-- name: InsertUserAvatar :exec
UPDATE users
SET avatar_url = $1
WHERE id = $2
RETURNING id, email, password, full_name, verified_email, avatar_url, bio, open_to_work, created_at, updated_at, deleted_at
`

type InsertUserAvatarParams struct {
	AvatarUrl sql.NullString
	ID        int64
}

func (q *Queries) InsertUserAvatar(ctx context.Context, arg InsertUserAvatarParams) error {
	_, err := q.db.ExecContext(ctx, insertUserAvatar, arg.AvatarUrl, arg.ID)
	return err
}

const insertUserDetail = `-- name: InsertUserDetail :one
INSERT INTO user_details (
  user_id, phone_number, gender
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, phone_number, gender, location, portfolio_url, about, hide_phone_number, created_at, updated_at
`

type InsertUserDetailParams struct {
	UserID      sql.NullInt64
	PhoneNumber sql.NullString
	Gender      sql.NullString
}

func (q *Queries) InsertUserDetail(ctx context.Context, arg InsertUserDetailParams) (UserDetail, error) {
	row := q.db.QueryRowContext(ctx, insertUserDetail, arg.UserID, arg.PhoneNumber, arg.Gender)
	var i UserDetail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PhoneNumber,
		&i.Gender,
		&i.Location,
		&i.PortfolioUrl,
		&i.About,
		&i.HidePhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertUserDetailAbout = `-- name: InsertUserDetailAbout :one
INSERT INTO user_details (
  user_id, about
) VALUES (
  $1, $2
)
RETURNING id, user_id, phone_number, gender, location, portfolio_url, about, hide_phone_number, created_at, updated_at
`

type InsertUserDetailAboutParams struct {
	UserID sql.NullInt64
	About  sql.NullString
}

func (q *Queries) InsertUserDetailAbout(ctx context.Context, arg InsertUserDetailAboutParams) (UserDetail, error) {
	row := q.db.QueryRowContext(ctx, insertUserDetailAbout, arg.UserID, arg.About)
	var i UserDetail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PhoneNumber,
		&i.Gender,
		&i.Location,
		&i.PortfolioUrl,
		&i.About,
		&i.HidePhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertUserSkill = `-- name: InsertUserSkill :one
INSERT INTO user_skills (
  user_id, skill_id, main_skill
) VALUES (
   $1, $2, $3
)
RETURNING id, user_id, skill_id, main_skill
`

type InsertUserSkillParams struct {
	UserID    sql.NullInt64
	SkillID   sql.NullInt64
	MainSkill sql.NullBool
}

func (q *Queries) InsertUserSkill(ctx context.Context, arg InsertUserSkillParams) (UserSkill, error) {
	row := q.db.QueryRowContext(ctx, insertUserSkill, arg.UserID, arg.SkillID, arg.MainSkill)
	var i UserSkill
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SkillID,
		&i.MainSkill,
	)
	return i, err
}

const insertWorkExperience = `-- name: InsertWorkExperience :one
INSERT INTO work_experiences (
  user_id, job_title, company_id, employment_type_id, location, location_type_id, start_date, finish_date, description
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, user_id, job_title, company_id, employment_type_id, location, location_type_id, start_date, finish_date, description, created_at, updated_at
`

type InsertWorkExperienceParams struct {
	UserID           sql.NullInt64
	JobTitle         sql.NullString
	CompanyID        sql.NullInt64
	EmploymentTypeID sql.NullInt16
	Location         sql.NullString
	LocationTypeID   sql.NullInt16
	StartDate        sql.NullTime
	FinishDate       sql.NullTime
	Description      sql.NullString
}

func (q *Queries) InsertWorkExperience(ctx context.Context, arg InsertWorkExperienceParams) (WorkExperience, error) {
	row := q.db.QueryRowContext(ctx, insertWorkExperience,
		arg.UserID,
		arg.JobTitle,
		arg.CompanyID,
		arg.EmploymentTypeID,
		arg.Location,
		arg.LocationTypeID,
		arg.StartDate,
		arg.FinishDate,
		arg.Description,
	)
	var i WorkExperience
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.JobTitle,
		&i.CompanyID,
		&i.EmploymentTypeID,
		&i.Location,
		&i.LocationTypeID,
		&i.StartDate,
		&i.FinishDate,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserDetailAbout = `-- name: UpdateUserDetailAbout :exec
UPDATE user_details
SET about = $1
WHERE user_id = $2
RETURNING id, user_id, phone_number, gender, location, portfolio_url, about, hide_phone_number, created_at, updated_at
`

type UpdateUserDetailAboutParams struct {
	About  sql.NullString
	UserID sql.NullInt64
}

func (q *Queries) UpdateUserDetailAbout(ctx context.Context, arg UpdateUserDetailAboutParams) error {
	_, err := q.db.ExecContext(ctx, updateUserDetailAbout, arg.About, arg.UserID)
	return err
}
