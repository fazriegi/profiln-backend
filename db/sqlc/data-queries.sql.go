// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: data-queries.sql

package db

import (
	"context"
)

const getCompanies = `-- name: GetCompanies :many
SELECT id, name, COUNT(*) OVER () AS total_rows
FROM companies
OFFSET $1
LIMIT $2
`

type GetCompaniesParams struct {
	Offset int32
	Limit  int32
}

type GetCompaniesRow struct {
	ID        int64
	Name      string
	TotalRows int64
}

func (q *Queries) GetCompanies(ctx context.Context, arg GetCompaniesParams) ([]GetCompaniesRow, error) {
	rows, err := q.db.QueryContext(ctx, getCompanies, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCompaniesRow
	for rows.Next() {
		var i GetCompaniesRow
		if err := rows.Scan(&i.ID, &i.Name, &i.TotalRows); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIssuingOrganizations = `-- name: GetIssuingOrganizations :many
SELECT id, name, COUNT(*) OVER () AS total_rows
FROM issuing_organizations
OFFSET $1
LIMIT $2
`

type GetIssuingOrganizationsParams struct {
	Offset int32
	Limit  int32
}

type GetIssuingOrganizationsRow struct {
	ID        int64
	Name      string
	TotalRows int64
}

func (q *Queries) GetIssuingOrganizations(ctx context.Context, arg GetIssuingOrganizationsParams) ([]GetIssuingOrganizationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getIssuingOrganizations, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetIssuingOrganizationsRow
	for rows.Next() {
		var i GetIssuingOrganizationsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.TotalRows); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSchools = `-- name: GetSchools :many
SELECT id, name, COUNT(*) OVER () AS total_rows
FROM schools
OFFSET $1
LIMIT $2
`

type GetSchoolsParams struct {
	Offset int32
	Limit  int32
}

type GetSchoolsRow struct {
	ID        int64
	Name      string
	TotalRows int64
}

func (q *Queries) GetSchools(ctx context.Context, arg GetSchoolsParams) ([]GetSchoolsRow, error) {
	rows, err := q.db.QueryContext(ctx, getSchools, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSchoolsRow
	for rows.Next() {
		var i GetSchoolsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.TotalRows); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSkills = `-- name: GetSkills :many
SELECT id, name, COUNT(id) OVER () AS total_rows
FROM skills
OFFSET $1
LIMIT $2
`

type GetSkillsParams struct {
	Offset int32
	Limit  int32
}

type GetSkillsRow struct {
	ID        int64
	Name      string
	TotalRows int64
}

func (q *Queries) GetSkills(ctx context.Context, arg GetSkillsParams) ([]GetSkillsRow, error) {
	rows, err := q.db.QueryContext(ctx, getSkills, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSkillsRow
	for rows.Next() {
		var i GetSkillsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.TotalRows); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
